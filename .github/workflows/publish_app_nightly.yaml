name: app-build-action-nightly

on:
    workflow_dispatch:
    push:
        branches:
            - nightly

jobs:
    # macOS + iOS + Android
    build-mac-ios-android:
        runs-on: macos-latest
        permissions:
            contents: write
        env:
            KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
            STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
            KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
            KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
            TV_KEYSTORE_BASE64: ${{ secrets.TV_KEYSTORE_BASE64 }}
            TV_STORE_PASSWORD: ${{ secrets.TV_STORE_PASSWORD }}
            TV_KEY_PASSWORD: ${{ secrets.TV_KEY_PASSWORD }}
            TV_KEY_ALIAS: ${{ secrets.TV_KEY_ALIAS }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: nightly

            # Android ‰∏ªÁ≠æÂêç
            - name: Decode Android keystore
              if: env.KEYSTORE_BASE64 != ''
              uses: timheuer/base64-to-file@v1.2
              id: android_keystore
              with:
                  fileName: keystore.jks
                  encodedString: ${{ env.KEYSTORE_BASE64 }}
            - name: Create Android key.properties
              if: env.KEYSTORE_BASE64 != ''
              run: |
                  echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > simple_live_app/android/key.properties
                  echo "storePassword=${{ env.STORE_PASSWORD }}" >> simple_live_app/android/key.properties
                  echo "keyPassword=${{ env.KEY_PASSWORD }}" >> simple_live_app/android/key.properties
                  echo "keyAlias=${{ env.KEY_ALIAS }}" >> simple_live_app/android/key.properties

            # Android TV Á≠æÂêç
            - name: Decode Android TV keystore
              if: env.TV_KEYSTORE_BASE64 != ''
              uses: timheuer/base64-to-file@v1.2
              id: android_tv_keystore
              with:
                  fileName: keystore_tv.jks
                  encodedString: ${{ env.TV_KEYSTORE_BASE64 }}
            - name: Create Android TV key.properties
              if: env.TV_KEYSTORE_BASE64 != ''
              run: |
                  echo "storeFile=${{ steps.android_tv_keystore.outputs.filePath }}" > simple_live_tv_app/android/key.properties
                  echo "storePassword=${{ env.TV_STORE_PASSWORD }}" >> simple_live_tv_app/android/key.properties
                  echo "keyPassword=${{ env.TV_KEY_PASSWORD }}" >> simple_live_tv_app/android/key.properties
                  echo "keyAlias=${{ env.TV_KEY_ALIAS }}" >> simple_live_tv_app/android/key.properties

            - name: Setup Java environment
              uses: actions/setup-java@v4
              with:
                  distribution: zulu
                  java-version: '17'
                  cache: gradle

            - name: Setup Flutter environment
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.32.0'
                  cache: true

            - name: Enable macOS desktop support
              run: flutter config --enable-macos-desktop

            - name: Get Flutter dependencies
              run: cd simple_live_app && flutter pub get

            - name: Install fast-forge
              run: |
                  git clone https://github.com/fastforgedev/fastforge.git
                  cd fastforge
                  dart pub global activate melos
                  melos run activate

            # ËÆæÁΩÆ xcode-version
            - name: Setup Xcode
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest-stable

            - name: Install Node.js and appdmg
              run: |
                  brew install node
                  npm install -g appdmg

            - name: Build Android APK
              run: |
                  cd simple_live_app
                  flutter build apk --release --split-per-abi
            - name: Upload Android APK artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: android
                  path: simple_live_app/build/app/outputs/flutter-apk/*.apk

            # - name: Build Android TV APK
            #   run: |
            #       cd simple_live_tv_app
            #       flutter build apk --release --split-per-abi
            # - name: Upload Android TV APK artifacts
            #   uses: actions/upload-artifact@v4
            #   with:
            #       name: android_tv
            #       path: simple_live_tv_app/build/app/outputs/flutter-apk/*.apk

            - name: Build iOS IPA
              run: |
                  cd simple_live_app
                  flutter build ios --release --no-codesign
                  mkdir -p build/ios/iphoneos/Payload
                  cp -R build/ios/iphoneos/Runner.app build/ios/iphoneos/Payload/Runner.app
                  cd build/ios/iphoneos
                  zip -q -r ios_no_sign.ipa Payload
            - name: Upload iOS IPA artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ios
                  path: simple_live_app/build/ios/iphoneos/ios_no_sign.ipa

            - name: Build macOS dmg and zip packages
              run: |
                  cd simple_live_app
                  fastforge package --platform macos --targets dmg,zip --skip-clean
            - name: Upload macOS artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: mac
                  path: |
                      simple_live_app/build/dist/*/*.dmg
                      simple_live_app/build/dist/*/*.zip

            - name: macOS/iOS/Android build done
              run: echo "üçè macOS/iOS/Android build done."

    build-linux:
        runs-on: ubuntu-22.04
        permissions:
            contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: nightly

            - name: Setup Flutter environment
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.32.0'
                  cache: true

            - name: Update apt-get
              run: sudo apt-get update
            - name: Install Linux dependencies
              run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libmpv-dev mpv libasound2-dev

            - name: Enable Linux desktop support
              run: flutter config --enable-linux-desktop

            - name: Get Flutter dependencies
              run: cd simple_live_app && flutter pub get

            - name: Install fast-forge
              run: |
                  git clone https://github.com/fastforgedev/fastforge.git
                  cd fastforge
                  dart pub global activate melos
                  melos run activate

            - name: Build Linux packages
              run: |
                  cd simple_live_app
                  fastforge package --platform linux --targets deb,zip --skip-clean

            - name: Upload Linux artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: linux
                  path: |
                      simple_live_app/build/dist/*/*.deb
                      simple_live_app/build/dist/*/*.zip

            - name: Linux build done
              run: echo "üçè Linux build done."

    build-windows:
        runs-on: windows-latest
        permissions:
            contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: nightly

            - name: Setup Flutter environment
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.32.0'
                  cache: true

            - name: Enable Windows desktop support
              run: flutter config --enable-windows-desktop

            - name: Clean and get Flutter dependencies
              run: cd simple_live_app && flutter clean && flutter pub get

            - name: Install fast-forge
              run: |
                  git clone https://github.com/fastforgedev/fastforge.git
                  cd fastforge
                  dart pub global activate melos
                  melos run activate

            - name: Build Windows packages
              run: |
                  cd simple_live_app
                  fastforge package --platform windows --targets msix,zip --skip-clean

            - name: Upload Windows artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: windows
                  path: |
                      simple_live_app/build/dist/*/*.msix
                      simple_live_app/build/dist/*/*.zip

            - name: Windows build done
              run: echo "üçè Windows build done."

    release-nightly:
        needs:
            - build-mac-ios-android
            - build-linux
            - build-windows
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts/mac_ios_android
                  pattern: '{android,ios,mac,android_tv}'
                  merge-multiple: true

            - name: Download Linux artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts/linux
                  pattern: linux
                  merge-multiple: true

            - name: Download Windows artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts/windows
                  pattern: windows
                  merge-multiple: true

            - name: Delete existing release
              run: |
                  gh release delete nightly --yes || true
                  git tag -d nightly || true
                  git push origin :refs/tags/nightly || true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Generate release timestamp
              id: datetime
              run: echo "value=$(date +'%Y-%m-%d %H:%M')" >> "$GITHUB_OUTPUT"

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: nightly
                  name: 'Nightly ${{ steps.datetime.outputs.value }}'
                  body: "Automated nightly build from 'nightly' branch at ${{ steps.datetime.outputs.value }}"
                  prerelease: true
                  files: |
                      artifacts/mac_ios_android/*.apk
                      artifacts/mac_ios_android/*.ipa
                      artifacts/mac_ios_android/*/*.dmg
                      artifacts/mac_ios_android/*/*.zip
                      artifacts/linux/*/*.deb
                      artifacts/linux/*/*.zip
                      artifacts/windows/*/*.msix
                      artifacts/windows/*/*.zip
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Release created
              run: echo "üéâ Pre-release nightly updated."
