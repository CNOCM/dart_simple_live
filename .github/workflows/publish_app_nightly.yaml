name: app-build-action-nightly

on:
    workflow_dispatch:
    push:
        branches:
            - nightly
        paths:
            - '**'
            - '!simple_live_tv_app/**'

jobs:
    build:
        strategy:
            matrix:
                platform: [android, ios, macos, linux]
            fail-fast: false
        runs-on: ${{ matrix.platform == 'linux' && 'ubuntu-22.04' || 'macos-latest' }}
        continue-on-error: true

        steps:
            - uses: actions/checkout@v4

            # Android keystore
            - name: Setup Android keystore
              if: matrix.platform == 'android'
              id: android_keystore
              uses: timheuer/base64-to-file@v1.2
              with:
                  fileName: keystore.jks
                  encodedString: ${{ secrets.KEYSTORE_BASE64 }}

            - name: Create key.properties
              if: matrix.platform == 'android'
              run: |
                  echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > simple_live_app/android/key.properties
                  echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> simple_live_app/android/key.properties
                  echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> simple_live_app/android/key.properties
                  echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> simple_live_app/android/key.properties

            - uses: actions/setup-java@v4
              if: matrix.platform == 'android'
              with:
                  distribution: 'zulu'
                  java-version: '17'
                  cache: 'gradle'

            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.32.0'
                  cache: true

            - name: Install Linux deps
              if: matrix.platform == 'linux'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libmpv-dev mpv libasound2-dev

            - name: Setup Xcode
              if: matrix.platform == 'ios' || matrix.platform == 'macos'
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest-stable

            - name: Install appdmg
              if: matrix.platform == 'macos'
              run: npm install -g appdmg

            - name: Enable desktop
              run: |
                  case "${{ matrix.platform }}" in
                    macos) flutter config --enable-macos-desktop ;;
                    linux) flutter config --enable-linux-desktop ;;
                  esac

            - name: Restore packages
              run: |
                  cd simple_live_app
                  flutter pub get

            - name: Install fastforge
              run: |
                  dart pub global activate fastforge

            - name: Build

              run: |
                  cd simple_live_app
                  case "${{ matrix.platform }}" in
                    android) flutter build apk --release --split-per-abi ;;
                    ios) flutter build ios --release --no-codesign --no-simulator && \
                         mkdir -p build/ios/iphoneos/Payload && \
                         cp -R build/ios/iphoneos/Runner.app build/ios/iphoneos/Payload/Runner.app && \
                         cd build/ios/iphoneos && \
                         zip -q -r ios_no_sign.ipa Payload && \
                         cd ../../.. ;;
                    macos) fastforge package --platform macos --targets dmg,zip --skip-clean ;;
                    linux) fastforge package --platform linux --targets deb,zip --skip-clean ;;
                  esac

            - name: Read version
              id: get_version
              run: |
                  VERSION=$(grep '^version:' simple_live_app/pubspec.yaml | awk '{print $2}' | cut -d+ -f1)
                  echo "version=$VERSION" >> "$GITHUB_OUTPUT"

            - name: Rename
              run: |
                  PLATFORM=${{ matrix.platform }}
                  VERSION=${{ steps.get_version.outputs.version }}
                  ARTIFACT_DIR=artifacts/$PLATFORM
                  mkdir -p $ARTIFACT_DIR

                  if [ "$PLATFORM" = "android" ]; then
                      for f in simple_live_app/build/app/outputs/flutter-apk/*.apk; do
                          [ -e "$f" ] || continue
                          EXT="${f##*.}"
                          ARCH=$(basename "$f" | sed -E 's/^app-(.*)-release\.apk$/\1/')
                          mv "$f" "$ARTIFACT_DIR/simple_live_app-$PLATFORM-$ARCH.$EXT"
                      done
                  elif [ "$PLATFORM" = "ios" ]; then
                      mv simple_live_app/build/ios/iphoneos/ios_no_sign.ipa \
                          "$ARTIFACT_DIR/simple_live_app-$PLATFORM.ipa"
                  elif [ "$PLATFORM" = "linux" ]; then
                      for f in simple_live_app/build/dist/*/*.deb; do
                          [ -e "$f" ] || continue
                          EXT="${f##*.}"
                          mv "$f" "$ARTIFACT_DIR/simple_live_app-$PLATFORM.$EXT"
                      done
                      for f in simple_live_app/build/dist/*/*.zip; do
                          [ -e "$f" ] || continue
                          EXT="${f##*.}"
                          mv "$f" "$ARTIFACT_DIR/simple_live_app-$PLATFORM.$EXT"
                      done
                  elif [ "$PLATFORM" = "macos" ]; then
                      for f in simple_live_app/build/dist/*/*.dmg; do
                          [ -e "$f" ] || continue
                          EXT="${f##*.}"
                          mv "$f" "$ARTIFACT_DIR/simple_live_app-$PLATFORM.$EXT"
                      done
                      for f in simple_live_app/build/dist/*/*.zip; do
                          [ -e "$f" ] || continue
                          EXT="${f##*.}"
                          mv "$f" "$ARTIFACT_DIR/simple_live_app-$PLATFORM.$EXT"
                      done
                  fi

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.platform }}
                  path: artifacts/${{ matrix.platform }}/*

            - name: Show build status
              run: |
                  echo "🍏 ${{ matrix.platform }} build status: ${{ job.status }}"

    build-windows:
        runs-on: windows-latest
        continue-on-error: true
        steps:
            - uses: actions/checkout@v4

            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.32.0'
                  cache: true

            - name: Enable Windows Desktop
              run: flutter config --enable-windows-desktop

            - name: Restore packages
              run: |
                  cd simple_live_app
                  flutter pub get

            - name: Install fastforge
              run: |
                  dart pub global activate fastforge

            - name: Build Windows
              run: |
                  cd simple_live_app
                  fastforge package --platform windows --targets msix,zip --skip-clean

            - name: Read version
              id: get_version
              run: |
                  $content = Get-Content simple_live_app\pubspec.yaml
                  $versionLine = $content | Where-Object { $_ -match '^version:' }
                  $version = ($versionLine -split ' ')[1] -split '\+' | Select-Object -First 1
                  Write-Output "version=$version" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8

            - name: Rename
              run: |
                  $version = (Get-Content $Env:GITHUB_OUTPUT | Select-String 'version=(.*)' | ForEach-Object { $_.Matches[0].Value -replace 'version=', '' })
                  $artifactDir = "artifacts\windows"
                  New-Item -ItemType Directory -Force -Path $artifactDir

                  Get-ChildItem simple_live_app\build\dist\**\*.* | ForEach-Object {
                      $ext = $_.Extension
                      $name = "simple_live_app-windows$ext"
                      Move-Item $_.FullName "$artifactDir\$name"
                  }

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: windows
                  path: artifacts/windows/*

            - name: Show build status
              shell: pwsh
              run: |
                  Write-Output "🍏 Windows build status: $($env:JOB_STATUS)"

    release-nightly:
        needs: [build, build-windows]
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts
                  merge-multiple: true

            - name: Generate release timestamp
              id: datetime
              run: |
                  echo "value=$(date +'%Y-%m-%d %H:%M')" >> "$GITHUB_OUTPUT"

            - name: Install GitHub CLI
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gh

            - name: Upload release assets
              run: |
                  if gh release view nightly --repo ${{ github.repository }}; then
                    echo "Release exists, uploading assets..."
                  else
                    echo "Release not found, creating release..."
                    gh release create nightly \
                      --prerelease \
                      --repo ${{ github.repository }}
                  fi
                  find artifacts -type f | xargs gh release upload nightly --clobber --repo ${{ github.repository }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Release created
              run: |
                  echo "🎉 Pre-release nightly updated."
