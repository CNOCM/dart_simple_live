name: app-build-action

on:
    push:
        tags:
            - 'v*'

jobs:
    build:
        strategy:
            matrix:
                platform: [android, androidtv, ios, macos, linux]
            fail-fast: false
        runs-on: ${{ matrix.platform == 'linux' && 'ubuntu-22.04' || 'macos-latest' }}
        continue-on-error: true

        steps:
            - uses: actions/checkout@v4

            # Keystore ÈÖçÁΩÆ
            - name: Setup keystore
              if: matrix.platform == 'android' || matrix.platform == 'androidtv'
              id: keystore
              uses: timheuer/base64-to-file@v1.2
              with:
                  fileName: keystore-${{ matrix.platform }}.jks
                  encodedString: ${{ matrix.platform == 'android' && secrets.KEYSTORE_BASE64 || secrets.TV_KEYSTORE_BASE64 }}

            - name: Create key.properties
              if: matrix.platform == 'android' || matrix.platform == 'androidtv'
              run: |
                  if [ "${{ matrix.platform }}" = "android" ]; then
                    APP_DIR=simple_live_app
                    STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}
                    KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
                    KEY_ALIAS=${{ secrets.KEY_ALIAS }}
                  else
                    APP_DIR=simple_live_tv_app
                    STORE_PASSWORD=${{ secrets.TV_STORE_PASSWORD }}
                    KEY_PASSWORD=${{ secrets.TV_KEY_PASSWORD }}
                    KEY_ALIAS=${{ secrets.TV_KEY_ALIAS }}
                  fi

                  echo "storeFile=${{ steps.keystore.outputs.filePath }}" > $APP_DIR/android/key.properties
                  echo "storePassword=$STORE_PASSWORD" >> $APP_DIR/android/key.properties
                  echo "keyPassword=$KEY_PASSWORD" >> $APP_DIR/android/key.properties
                  echo "keyAlias=$KEY_ALIAS" >> $APP_DIR/android/key.properties

            - uses: actions/setup-java@v4
              if: matrix.platform == 'android' || matrix.platform == 'androidtv'
              with:
                  distribution: 'zulu'
                  java-version: '17'
                  cache: 'gradle'

            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.32.0'
                  cache: true

            - name: Install Linux deps
              if: matrix.platform == 'linux'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libmpv-dev mpv libasound2-dev

            - name: Setup Xcode
              if: matrix.platform == 'ios' || matrix.platform == 'macos'
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: latest-stable

            - name: Install appdmg
              if: matrix.platform == 'macos'
              run: npm install -g appdmg

            - name: Enable desktop
              run: |
                  case "${{ matrix.platform }}" in
                    macos) flutter config --enable-macos-desktop ;;
                    linux) flutter config --enable-linux-desktop ;;
                  esac

            - name: Restore packages
              run: |
                  if [ "${{ matrix.platform }}" = "androidtv" ]; then
                    cd simple_live_tv_app
                  else
                    cd simple_live_app
                  fi
                  flutter pub get

            - name: Install fastforge
              run: dart pub global activate fastforge

            - name: Read version
              id: get_version
              run: |
                  if [ "${{ matrix.platform }}" = "androidtv" ]; then
                    VERSION=$(grep '^version:' simple_live_tv_app/pubspec.yaml | awk '{print $2}' | cut -d+ -f1)
                  else
                    VERSION=$(grep '^version:' simple_live_app/pubspec.yaml | awk '{print $2}' | cut -d+ -f1)
                  fi
                  echo "version=$VERSION" >> "$GITHUB_OUTPUT"

            - name: Build
              run: |
                  case "${{ matrix.platform }}" in
                    android)
                      cd simple_live_app
                      fastforge package --platform=android --targets=apk --skip-clean --flutter-build-args=split-per-abi
                      ;;
                    androidtv)
                      cd simple_live_tv_app
                      fastforge package --platform=android --targets=apk --skip-clean --flutter-build-args=split-per-abi
                      ;;
                    ios)
                      cd simple_live_app
                      flutter build ios --release --no-codesign --no-simulator && \
                      mkdir -p build/ios/iphoneos/Payload && \
                      cp -R build/ios/iphoneos/Runner.app build/ios/iphoneos/Payload/Runner.app && \
                      cd build/ios/iphoneos && \
                      zip -q -r ios_no_sign.ipa Payload && \
                      cd ../../..
                      ;;
                    macos)
                      cd simple_live_app
                      fastforge package --platform macos --targets dmg,zip --skip-clean
                      ;;
                    linux)
                      cd simple_live_app
                      fastforge package --platform linux --targets deb,zip --skip-clean
                      ;;
                  esac

            - name: Rename
              run: |
                  PLATFORM=${{ matrix.platform }}
                  VERSION=${{ steps.get_version.outputs.version }}
                  ARTIFACT_DIR=artifacts/$PLATFORM
                  mkdir -p $ARTIFACT_DIR

                  if [ "$PLATFORM" = "android" ]; then
                    for f in simple_live_app/build/app/outputs/flutter-apk/*.apk; do
                      [ -e "$f" ] || continue
                      EXT="${f##*.}"
                      ARCH=$(basename "$f" | sed -E 's/^app-(.*)-release\.apk$/\1/')
                      mv "$f" "$ARTIFACT_DIR/simple_live_app-$VERSION-$PLATFORM-$ARCH.$EXT"
                    done
                  elif [ "$PLATFORM" = "androidtv" ]; then
                    for f in simple_live_tv_app/build/app/outputs/flutter-apk/*.apk; do
                      [ -e "$f" ] || continue
                      EXT="${f##*.}"
                      ARCH=$(basename "$f" | sed -E 's/^app-(.*)-release\.apk$/\1/')
                      mv "$f" "$ARTIFACT_DIR/simple_live_tv-$VERSION-$PLATFORM-$ARCH.$EXT"
                    done
                  elif [ "$PLATFORM" = "ios" ]; then
                    mv simple_live_app/build/ios/iphoneos/ios_no_sign.ipa \
                      "$ARTIFACT_DIR/simple_live_app-$VERSION-$PLATFORM.ipa"
                  elif [ "$PLATFORM" = "linux" ]; then
                    for f in simple_live_app/build/dist/*/*.{deb,zip}; do
                      [ -e "$f" ] || continue
                      EXT="${f##*.}"
                      mv "$f" "$ARTIFACT_DIR/simple_live_app-$VERSION-$PLATFORM.$EXT"
                    done
                  elif [ "$PLATFORM" = "macos" ]; then
                    for f in simple_live_app/build/dist/*/*.{dmg,zip}; do
                      [ -e "$f" ] || continue
                      EXT="${f##*.}"
                      mv "$f" "$ARTIFACT_DIR/simple_live_app-$VERSION-$PLATFORM.$EXT"
                    done
                  fi

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.platform }}
                  path: artifacts/${{ matrix.platform }}/*

            - name: Show build status
              run: |
                  echo "üçè ${{ matrix.platform }} build status: ${{ job.status }}"

    build-windows:
        runs-on: windows-latest
        continue-on-error: true
        steps:
            - uses: actions/checkout@v4

            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: '3.32.0'
                  cache: true

            - name: Enable Windows Desktop
              run: flutter config --enable-windows-desktop

            - name: Restore packages
              run: cd simple_live_app && flutter pub get

            - name: Install fastforge
              run: dart pub global activate fastforge

            - name: Read version
              id: get_version
              run: |
                  $content = Get-Content simple_live_app\pubspec.yaml
                  $versionLine = $content | Where-Object { $_ -match '^\s*version\s*:' }
                  $version = ($versionLine -replace '^\s*version\s*:\s*', '') -split '\+' | Select-Object -First 1
                  Write-Output "version=$version" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8

            - name: Build Windows
              run: cd simple_live_app && fastforge package --platform windows --targets msix,zip --skip-clean

            - name: Rename
              run: |
                  $version = (Get-Content $Env:GITHUB_OUTPUT | Select-String 'version=(.*)' | ForEach-Object { $_.Matches[0].Groups[1].Value })
                  $artifactDir = "artifacts\windows"
                  New-Item -ItemType Directory -Force -Path $artifactDir
                  Get-ChildItem simple_live_app\build\dist\**\*.* | ForEach-Object {
                      $ext = $_.Extension
                      $name = "simple_live_app-$version-windows$ext"
                      Move-Item $_.FullName "$artifactDir\$name"
                  }

            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: windows
                  path: artifacts/windows/*

            - name: Show build status
              shell: pwsh
              run: |
                  Write-Output "üçè Windows build status: $($env:JOB_STATUS)"

    release:
        needs: [build, build-windows]
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4

            - name: Download artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts
                  merge-multiple: true

            - name: Install GitHub CLI
              run: sudo apt-get update && sudo apt-get install -y gh

            - name: Extract release notes from CHANGELOG.md
              id: changelog
              run: |
                  TAG=${GITHUB_REF_NAME}
                  echo "Looking for changelog entry for $TAG"

                  NOTES=$(awk -v tag="$TAG" '
                    $0 ~ "<summary>"tag"</summary>" {flag=1; next}
                    flag && /<\/details>/ {flag=0}
                    flag {print}
                  ' CHANGELOG.md)

                  if [ -z "$NOTES" ]; then
                    NOTES="Êú™ÊâæÂà∞ $TAG ÁöÑÊõ¥Êñ∞Êó•Âøó„ÄÇ"
                  fi

                  echo "notes<<EOF" >> $GITHUB_OUTPUT
                  echo "$NOTES" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Create or update GitHub Release
              run: |
                  TAG=${GITHUB_REF_NAME}
                  echo "Publishing release for $TAG"

                  if gh release view "$TAG" --repo ${{ github.repository }} >/dev/null 2>&1; then
                    echo "Release $TAG already exists, updating notes..."
                    gh release edit "$TAG" \
                      --notes "${{ steps.changelog.outputs.notes }}" \
                      --repo ${{ github.repository }}
                  else
                    gh release create "$TAG" \
                      --title "$TAG" \
                      --notes "${{ steps.changelog.outputs.notes }}" \
                      --repo ${{ github.repository }}
                  fi

                  find artifacts -type f | xargs gh release upload "$TAG" --clobber --repo ${{ github.repository }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Release created
              run: echo "üéâ Release for tag $GITHUB_REF_NAME created with changelog notes."
